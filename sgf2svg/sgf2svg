#!/usr/bin/python -tt

import sgflib, sgfboard, optparse, sys

# SVG Templates {{{
SVG_HEAD = '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   version="1.1"
   width="%(width)d"
   height="%(height)d">
'''
SVG_DEFS = '''
<defs>
    <style type="text/css"><![CDATA[

    #blackStone circle {
        fill: url(#blackStoneGradient);
        stroke: #000000;
        stroke-width: 1;
    }

    #whiteStone circle {
        fill: url(#whiteStoneGradient);
        stroke: #808080;
        stroke-width: 1;
    }

    #hoshi circle {
        fill: #705f36;
    }

    #boardBackground {
        fill: #ddbc6b;
    }

    .grid {
        stroke: #ae9454;
        stroke-width: 1.0;
        stroke-linecap: square;
    }

    ]]></style>

    <radialGradient id="blackStoneGradient"
        cx="-3" cy="-3" fx="-3" fy="-3" r="11" gradientUnits="userSpaceOnUse">
        <stop stop-color="#505050" stop-opacity="1.0" offset="0.0" />
        <stop stop-color="#282828" stop-opacity="1.0" offset="0.6" />
        <stop stop-color="#000000" stop-opacity="1.0" offset="1.0" />
    </radialGradient>
    <radialGradient id="whiteStoneGradient"
        cx="-3" cy="-3" fx="-3" fy="-3" r="11" gradientUnits="userSpaceOnUse">
        <stop stop-color="#ffffff" stop-opacity="1.0" offset="0.0" />
        <stop stop-color="#ffffff" stop-opacity="1.0" offset="0.3" />
        <stop stop-color="#d0d0d0" stop-opacity="1.0" offset="1.0" />
    </radialGradient>

    <symbol id="blackStone" viewBox="-9.5 -9.5 19 19">
        <circle r="9" />
    </symbol>
    <symbol id="whiteStone" viewBox="-9.5 -9.5 19 19">
        <circle r="9" />
    </symbol>
    <symbol id="hoshi" viewBox="-2 -2 4 4">
        <circle r="2" />
    </symbol>

</defs>
'''
SVG_BODY = '''
<g id="container">
    <g id="board">
    %(board)s
    </g>
    <g id="stones">
    %(stones)s
    </g>
    <g id="markers">
    %(markers)s
    </g>
</g>
'''
SVG_FOOT = '</svg>\n'
SVG_LINE = '<line class="%s" x1="%s" y1="%s" x2="%s" y2="%s" />'
# }}}

HOSHIS = { # {{{
    5: ((2, 2),),
    7: ((3, 3),),
    9: ((2, 2), (6, 2), (4, 4), (2, 6), (6, 6)),
    13: ((3, 3), (9, 3), (6, 6), (3, 9), (9, 9)),
    19: tuple( (x, y) for x in (3, 9, 15) for y in (3, 9, 15) ),
} # }}}

def attr_escape(val):
    special = (
        ('&', 'amp'),
        ('"', 'quot'),
        ('<', 'lt'),
        ('>', 'gt'),
    )
    val = str(val)
    for f, r in special:
        val = val.replace(f, '&'+r+';')
    return val

def keyfix(key):
    if key[0] == '_':
        key = key[1:]
    key = key.replace('_D', '-')
    key = key.replace('_C', ':')
    return key

def svg_tag(tagname, **kwarg):
    return '<%s %s />' % (tagname,
            ' '.join( '%s="%s"' % (keyfix(k), attr_escape(v)) for k, v in kwarg.items() ))

def make_svg(board, options):
    line_width = 1.0

    board_width = board.width * options.stone_size + options.board_padding*2
    board_height = board.height * options.stone_size + options.board_padding*2
    board_tags = []
    stone_tags = []
    marker_tags = []

    board_tags.append(svg_tag('rect', _id='boardBackground',
        x1=0, x2=0, width=board_width, height=board_height))

    for x in range(board.width):
        cls = 'grid'
        if x in (0, board.width-1):
            cls += ' gridOutside'
        x1 = x2 = options.board_padding + (x+0.5)*options.stone_size
        y1 = options.board_padding + options.stone_size/2.0
        y2 = board_height - options.stone_size/2.0 - options.board_padding
        board_tags.append(svg_tag('line', _class=cls, x1=x1, y1=y1, x2=x2, y2=y2))

    for y in range(board.height):
        cls = 'grid'
        if y in (0, board.height-1):
            cls += ' gridOutside'
        y1 = y2 = options.board_padding + (y+0.5)*options.stone_size
        x1 = options.board_padding + options.stone_size/2.0
        x2 = board_width - options.stone_size/2.0 - options.board_padding
        board_tags.append(svg_tag('line', _class=cls, x1=x1, y1=y1, x2=x2, y2=y2))

    if board.width == board.height and board.width in HOSHIS:
        for point in HOSHIS[board.width]:
            x, y = ( options.board_padding + (p+0.5)*options.stone_size-0.5*options.hoshi_size for p in point )
            board_tags.append(svg_tag('use', x=x, y=y,
                width=options.hoshi_size, height=options.hoshi_size, xlink_Chref='#hoshi'))

    for y in range(board.height):
        for x in range(board.width):
            if board.cur_stones[x][y] is None:
                continue
            xp, yp = ( options.board_padding + p*options.stone_size for p in (x, y) )
            if board.cur_stones[x][y] == 'B':
                href = '#blackStone'
            else:
                href = '#whiteStone'
            stone_tags.append(svg_tag('use', x=xp, y=yp,
                width=options.stone_size, height=options.stone_size, xlink_Chref=href))

    svg_vars = {
        'width': board_width,
        'height': board_height,
        'board': '\n'.join(board_tags),
        'stones': '\n'.join(stone_tags),
        'markers': '\n'.join(marker_tags),
    }
    return (SVG_HEAD + SVG_DEFS + SVG_BODY + SVG_FOOT) % svg_vars

def main():
    # Parse command line
    parser = optparse.OptionParser('usage: %prog [options] [input SGF file]')
    parser.add_option('-o', '--output-file', default='-',
            help='write output to FILE ("-" for stdout; the default)', metavar='FILE')
    parser.add_option('-d', '--diagram', action='store_true',
            help="produce a Sensei's style ascii diagram instead of SVG")
    parser.add_option('-g', '--game-number', type="int", default=0,
            help="for sgf game collections, use game number GAME", metavar='GAME')
    parser.add_option('-m', '--move-number', type="int", default=0,
            help="jump to move number MOVE in the main variation" +
            " (defaults to 0 - the starting position)", metavar='MOVE')
    parser.add_option('-s', '--stone-size', type="float", default=19,
            help="stone size (in pixels - default 19)", metavar='SIZE')
    parser.add_option('-H', '--hoshi-size', type="float", default=4,
            help="hoshi size (in pixels - default 4)", metavar='SIZE')
    parser.add_option('-b', '--board-padding', type="float", default=5,
            help="pad the board by PADDING pixels (default 5)", metavar='PADDING')
    options, args = parser.parse_args()

    # Get SGF data
    if len(args) > 1:
        print "No more than one input file may be specified (default is stdin)."
        parser.print_help()
        sys.exit()
    elif len(args) == 0 or args[0] == '-':
        infh = sys.stdin
    else:
        infh = file(args[0])
    sgf_data = infh.read()
    infh.close()

    # Process SGF file
    sgf_parser = sgflib.SGFParser(sgf_data)
    board = sgfboard.GoBoard()
    # In collections, will only utilize the first game
    game = sgf_parser.parse()[options.game_number]
    cursor = game.cursor()
    board.execute(cursor.node) # Initial setup node
    while not cursor.atEnd and board.move_number < options.move_number:
        cursor.next()
        board.execute(cursor.node)

    # Generate output
    if options.output_file in (None, '-'):
        outfh = sys.stdout
    else:
        outfh = file(options.output_file, 'w')
    if options.diagram:
        outfh.write(str(board))
    else:
        outfh.write(make_svg(board, options))
    outfh.close()

if __name__ == '__main__':
    main()
